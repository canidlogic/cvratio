#!/usr/bin/env perl
use strict;

=head1 NAME

tabulate.pl - Compute phoneme statistics and produce sorted records.

=head1 SYNOPSIS

  tabulate.pl all SEGS.txt sounds.txt LANGS.txt map.txt > output.txt
  tabulate.pl iso SEGS.txt sounds.txt LANGS.txt map.txt > output.txt

=head1 DESCRIPTION

There are five program arguments.

The first program argument is either C<all> or C<iso>.  If the argument
is C<all>, then a full list of all languages in UPSID will be generated.
If the argument is C<iso>, then only a subset of the full list will be
generated; specifically, those languages that also have a two-letter
ISO-639-1 code.

The second program argument is the path to the SEGS table from UPSID,
after it has been run through the C<denul.pl> script.  The third is the
path to the sound table, generated by the C<classify.pl> script.  The
fourth is the path to the LANGS table from UPSID, after it has been run
through the C<denul.pl> script.

The fifth program argument is the path to a file where each line has a
UPSID language code and then a two-letter ISO-639-1 language code.  This
mapping can be generated by the C<langmerge.pl> script.  However, manual
adjustment of the result should be done before using it with this
script.  Otherwise, for example, the UPSID language "Mandarin" will be
filtered out because C<langmerge.pl> fails to automatically connect it
to the ISO-639-1 "Chinese" record.

The output has one record per line.  The first field is the language
name.  The second field is the number of consonant sounds in the
language.  The third field is the number of vowel sounds in the
language.  The fourth field is the ratio of consonant sounds to vowel
sounds.  The list is sorted first in descending order of the ratio and
second by the language name.

=cut

# ===============
# Local functions
# ===============

# Comparison function for sorting the output records.
#
# This sorts first descending by ratio, and then by the language name.
# The special ratio of -1 sorts first.
#
sub rec_cmp {
  if (($a->[3] < 0) and ($b->[3] < 0)) {
    return ($a->[0] cmp $b->[0]);
  
  } elsif ($a->[3] < 0) {
    return -1;
    
  } elsif ($b->[3] < 0) {
    return 1;
    
  } else {
  
    if ($a->[3] < $b->[3]) {
      return 1;
    
    } elsif ($a->[3] > $b->[3]) {
      return -1;
      
    } else {
      return ($a->[0] cmp $b->[0]);
    }
  }
}

# load_sounds(path)
# -----------------
#
# Load the sound table that was generated by the classify.pl script.
#
# The result is a hash reference that has sound codes as keys and the
# values are the sound class 'v' or 'c'.
#
sub load_sounds {
  # Get parameters
  ($#_ == 0) or die;
  
  my $path = shift;
  (not ref($path)) or die;
  
  # Check that file exists
  (-f $path) or die "Can't find file: $path\n";
  
  # Open the file
  open(my $fh, "< :crlf", $path) or
    die "Failed to open file: $path\n";
  
  # Start results
  my %results;
  
  # Process lines
  for(
      my $ltext = readline($fh);
      defined $ltext;
      $ltext = readline($fh)) {
    
    # Drop line break
    chomp $ltext;
    
    # Whitespace trim
    $ltext =~ s/^\s+//;
    $ltext =~ s/\s+$//;
    
    # Skip if blank
    (length($ltext) > 0) or next;
    
    # Parse sound class and sound code
    ($ltext =~ /^([vc])\s+([\x{21}-\x{7e}]+)\s+/) or
      die "Invalid sound record line!\n";
    
    my $sound_class = $1;
    my $sound_code  = $2;
    
    # Check that sound not already defined
    (not (defined $results{$sound_code})) or
      die "Sound code duplicate definition!\n";
    
    # Add record to hash
    $results{$sound_code} = $sound_class;
  }
  
  # Close the file
  close($fh) or warn "Failed to close file at";
  
  # Return results
  return \%results;
}

# load_langs(path)
# ----------------
#
# Load the LANGS table.
#
# The result is a hash reference that has decimal language codes as keys
# and the language names as values.
#
sub load_langs {
  # Get parameters
  ($#_ == 0) or die;
  
  my $path = shift;
  (not ref($path)) or die;
  
  # Check that file exists
  (-f $path) or die "Can't find file: $path\n";
  
  # Open the file
  open(my $fh, "< :encoding(UTF-8) :crlf", $path) or
    die "Failed to open file: $path\n";
  
  # Start results
  my %results;
  
  # Process lines
  for(
      my $ltext = readline($fh);
      defined $ltext;
      $ltext = readline($fh)) {
    
    # Drop line break
    chomp $ltext;
    
    # Whitespace trim
    $ltext =~ s/^\s+//;
    $ltext =~ s/\s+$//;
    
    # Skip if blank
    (length($ltext) > 0) or next;
    
    # Parse language name and code
    ($ltext =~ /^([\x{20}-\x{7e}]+)\x{b7}\s+([0-9]+)\x{b7}\s+/) or
      die "Invalid language record line!\n";
    
    my $language_name = $1;
    my $language_code = $2;
    
    # Check that language not already defined
    (not (defined $results{$language_code})) or
      die "Language code duplicate definition!\n";
    
    # Add record to hash
    $results{$language_code} = $language_name;
  }
  
  # Close the file
  close($fh) or warn "Failed to close file at";
  
  # Return results
  return \%results;
}

# load_lang_codes(path)
# ---------------------
#
# Load the language code mapping.
#
# The result is a hash reference that has decimal language codes as keys
# and the language two-letter codes as values.
#
sub load_lang_codes {
  # Get parameters
  ($#_ == 0) or die;
  
  my $path = shift;
  (not ref($path)) or die;
  
  # Check that file exists
  (-f $path) or die "Can't find file: $path\n";
  
  # Open the file
  open(my $fh, "< :crlf", $path) or
    die "Failed to open file: $path\n";
  
  # Start results
  my %results;
  
  # Process lines
  for(
      my $ltext = readline($fh);
      defined $ltext;
      $ltext = readline($fh)) {
    
    # Drop line break
    chomp $ltext;
    
    # Whitespace trim
    $ltext =~ s/^\s+//;
    $ltext =~ s/\s+$//;
    
    # Skip if blank
    (length($ltext) > 0) or next;
    
    # Parse fields
    ($ltext =~ /^([0-9]+)\s+([a-z]{2})/) or
      die "Invalid language record line!\n";
    
    my $language_id   = $1;
    my $language_code = $2;
    
    # Check that language not already defined
    (not (defined $results{$language_id})) or
      die "Language ID duplicate definition!\n";
    
    # Add record to hash
    $results{$language_id} = $language_code;
  }
  
  # Close the file
  close($fh) or warn "Failed to close file at";
  
  # Return results
  return \%results;
}

# ==================
# Program entrypoint
# ==================

# Get program arguments
#
($#ARGV == 4) or die "Expecting five program arguments!\n";

my $list_mode   = shift @ARGV;
my $segs_path   = shift @ARGV;
my $sounds_path = shift @ARGV;
my $langs_path  = shift @ARGV;
my $subset_path = shift @ARGV;

# Check mode
#
(($list_mode eq 'all') or ($list_mode eq 'iso')) or
  die "Unrecognized program mode: $list_mode\n";

# Load sounds table
#
my $sounds = load_sounds($sounds_path);

# Load language table
#
my $langs = load_langs($langs_path);

# Load subset table
#
my $subset = load_lang_codes($subset_path);

# Start a hash that will map language codes to arrays storing the
# consonant count and vowel count
#
my %ltable;

# Open the SEGS table
#
open(my $fh, "< :encoding(UTF-8) :crlf", $segs_path) or
  die "Failed to open file: $segs_path\n";

# Read input to build the statistics hash
#
my $lnum = 0;
for(
    my $ltext = readline($fh);
    defined $ltext;
    $ltext = readline($fh))  {
  
  # Update line number
  $lnum++;
  
  # Drop any line breaks
  chomp $ltext;
  
  # Whitespace trim
  $ltext =~ s/^\s+//;
  $ltext =~ s/\s+$//;
  
  # Skip if blank
  (length($ltext) > 0) or next;
  
  # Get language ID and sound code from record
  ($ltext =~ /^([0-9]+)\x{b7}+\s+([\x{21}-\x{7e}]+)\x{b7}/) or
    die sprintf("SEGS line %d: Failed to parse record!\n", $lnum);
  
  my $lang_code  = $1;
  my $sound_code = $2;
  
  # Classify sound
  (defined $sounds->{$sound_code}) or
    die "Sound code $sound_code not in sounds table!\n";
  my $sclass = $sounds->{$sound_code};
  
  # If language not yet in language table, add it with counts starting
  # at zero
  unless (defined $ltable{$lang_code}) {
    $ltable{$lang_code} = [0, 0];
  }
  
  # Add the current record to the language record
  if ($sclass eq 'v') {
    ($ltable{$lang_code}->[1])++;
    
  } elsif ($sclass eq 'c') {
    ($ltable{$lang_code}->[0])++;
        
  } else {
    die;
  }
}

# Close the SEGS table file
#
close($fh) or warn "Failed to close file at";

# Define an array of output records
#
my @recs;

# Fill in the records with the language code, consonant count, vowel
# count, and ratio as the fields, filtering out any languages not in the
# table if in iso mode
#
while(my ($k, $v) = each %ltable) {
  
  # Skip if not in subset table and in ISO mode
  if ($list_mode eq 'iso') {
    (defined $subset->{$k}) or next;
  }
  
  # Get language name
  (defined $langs->{$k}) or
    die "Undefined language: $k\n";
  my $lname = $langs->{$k};
  
  # Compute ratio, or -1 if vowel count is zero
  my $ratio;
  if ($v->[1] < 1) {
    $ratio = -1;
  } else {
    $ratio = $v->[0] / $v->[1];
  }
    
  # Add record
  push @recs, ([$lname, $v->[0], $v->[1], $ratio]);
}

# Sort records
#
my @results = sort rec_cmp @recs;

# Print each record
#
for my $r (@results) {
  printf "%s %d %d %.2f\n", $r->[0], $r->[1], $r->[2], $r->[3];
}

=head1 AUTHOR

Noah Johnson, C<noah.johnson@loupmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2023 Multimedia Data Technology Inc.

MIT License:

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files
(the "Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
