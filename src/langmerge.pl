#!/usr/bin/env perl
use strict;

=head1 NAME

langmerge.pl - Attempt to merge language tokens with the UPSID language
list.

=head1 SYNOPSIS

  langmerge.pl langs.in token.in langs.out token.out map.out

=head1 DESCRIPTION

The input are two different files:  the UPSID language table that has
been run through the C<denul.pl> script, and a language token file that
was generated by the C<langtoken.pl> script.

The output are three different files.  The first is a list of language
names from the UPSID language table that had no matching tokens.  The
second is a subset of the input language token file that only records
for those language codes that were not matched to any UPSID record.  The
third is a mapping from UPSID language codes to ISO two-letter language
codes.

Manual adjustment will still be required for the generated mapping.  For
example, ISO has the language "Chinese" but UPSID has the language
"Mandarin".  Manual adjustment is required to link "Mandarin" to
"Chinese".

=cut

# ===============
# Local functions
# ===============

# load_langs(path)
# ----------------
#
# Load the LANGS table.
#
# The result is a hash reference that has decimal language codes as keys
# and the language names as values.
#
sub load_langs {
  # Get parameters
  ($#_ == 0) or die;
  
  my $path = shift;
  (not ref($path)) or die;
  
  # Check that file exists
  (-f $path) or die "Can't find file: $path\n";
  
  # Open the file
  open(my $fh, "< :encoding(UTF-8) :crlf", $path) or
    die "Failed to open file: $path\n";
  
  # Start results
  my %results;
  
  # Process lines
  for(
      my $ltext = readline($fh);
      defined $ltext;
      $ltext = readline($fh)) {
    
    # Drop line break
    chomp $ltext;
    
    # Whitespace trim
    $ltext =~ s/^\s+//;
    $ltext =~ s/\s+$//;
    
    # Skip if blank
    (length($ltext) > 0) or next;
    
    # Parse language name and code
    ($ltext =~ /^([\x{20}-\x{7e}]+)\x{b7}\s+([0-9]+)\x{b7}\s+/) or
      die "Invalid language record line!\n";
    
    my $language_name = $1;
    my $language_code = $2;
    
    # Check that language not already defined
    (not (defined $results{$language_code})) or
      die "Language code duplicate definition!\n";
    
    # Make language name uppercase
    $language_name =~ tr/a-z/A-Z/;
    
    # Add record to hash
    $results{$language_code} = $language_name;
  }
  
  # Close the file
  close($fh) or warn "Failed to close file at";
  
  # Return results
  return \%results;
}

# load_tokens(path)
# -----------------
#
# Load the language tokens file.
#
# The return value is a hash reference mapping language tokens to their
# two-letter language code.
#
sub load_tokens {
  # Get parameter
  ($#_ == 0) or die;
  
  my $path = shift;
  (not ref($path)) or die;
  
  # Check for file
  (-f $path) or die "Can't find file: $path\n";
  
  # Open the file
  open(my $fh, "< :crlf", $path) or
    die "Failed to open file: $path\n";
  
  # Start the result map
  my %result;
  
  # Process the file
  for(
      my $ltext = readline($fh);
      defined $ltext;
      $ltext = readline($fh)) {
  
    # Drop line break
    chomp $ltext;
    
    # Whitespace trim
    $ltext =~ s/^\s+//;
    $ltext =~ s/\s+$//;
    
    # Skip if blank
    (length($ltext) > 0) or next;
    
    # Parse record
    ($ltext =~ /^([a-z]{2})\s+(\S.*)$/) or
      die "Failed to parse language token record!\n";
    
    my $lang_code  = $1;
    my $lang_token = $2;
    
    # Make token uppercase
    $lang_token =~ tr/a-z/A-Z/;
    
    # Add to result mapping
    (not (defined $result{$lang_token})) or
      die sprintf("Language token %s defined multiple times!\n",
                  $lang_token);
    $result{$lang_token} = $lang_code;
  }
  
  # Close the file
  close($fh) or warn "Failed to close file at";
  
  # Return result
  return \%result;
}

# filter_tokens(in_path, map_set, out_path)
# -----------------------------------------
#
# Write a subset of the language token data.
#
# in_path is the path to the language token file.  out_path is the path
# to the filtered subset of this file that will be created.
#
# map_set maps two-letter language codes to a value of one.  Any
# language code that is in this set will NOT be included in the filtered
# output.
#
sub filter_tokens {
  # Get parameters
  ($#_ == 2) or die;
  
  my $in_path = shift;
  (not ref($in_path)) or die;
  
  my $map_set = shift;
  (ref($map_set) eq 'HASH') or die;
  
  my $out_path = shift;
  (not ref($out_path)) or die;
  
  # Check for input file
  (-f $in_path) or die "Can't find file: $in_path\n";
  
  # Open the input file and output file
  open(my $fh_in, "< :crlf", $in_path) or
    die "Failed to open file: $in_path\n";
  
  open(my $fh_out, ">", $out_path) or
    die "Failed to open file: $out_path\n";
  
  # Filter the input file to output
  for(
      my $ltext = readline($fh_in);
      defined $ltext;
      $ltext = readline($fh_in)) {
  
    # Drop line break
    chomp $ltext;
    
    # Whitespace trim
    $ltext =~ s/^\s+//;
    $ltext =~ s/\s+$//;
    
    # Skip if blank
    (length($ltext) > 0) or next;
    
    # Parse record
    ($ltext =~ /^([a-z]{2})\s+(\S.*)$/) or
      die "Failed to parse language token record!\n";
    
    my $lang_code  = $1;
    my $lang_token = $2;
    
    # Make token uppercase
    $lang_token =~ tr/a-z/A-Z/;
    
    # If record is not filtered out, print it to output
    unless (defined $map_set->{$lang_code}) {
      printf { $fh_out } "%s %s\n", $lang_code, $lang_token;
    }
  }
  
  # Close the file
  close($fh_out) or warn "Failed to close file at";
  close($fh_in ) or warn "Failed to close file at";
}

# ==================
# Program entrypoint
# ==================

# Get program arguments
#
($#ARGV == 4) or die "Expecting five program arguments!\n";

my $in_langs  = shift @ARGV;
my $in_token  = shift @ARGV;
my $out_langs = shift @ARGV;
my $out_token = shift @ARGV;
my $out_map   = shift @ARGV;

# Load the input tables
#
my $langs  = load_langs($in_langs);
my $tokens = load_tokens($in_token);

# Create structures to hold the mapping of UPSID language codes to
# two-letter language codes, a mapping of all two-letter language codes
# that have been mapped to UPSID to values of 1, and an array of all
# UPSID language names that could not be mapped
#
my %lmap;
my %cmap;
my @nmap;

# Go through the LANGS table and merge the data
#
for my $lang_key (keys %$langs) {

  # Check whether we have a token for this language
  if (defined $tokens->{$langs->{$lang_key}}) {
    # We found a token, so get the two-letter language code
    my $lang_code = $tokens->{$langs->{$lang_key}};
    
    # Make sure we haven't already mapped this language code
    (not (defined $cmap{$lang_code})) or
      die sprintf("Language code mapped multiple times: %s\n",
                  $lang_code);
    
    # Add this code to the mapping
    $cmap{$lang_code} = 1;
    $lmap{$lang_key}  = $lang_code;
  
  } else {
    # We don't have a token, so add it to the array of non-mapped
    # languages
    push @nmap, ($langs->{$lang_key});
  }
}

# Sort the list of unmapped languages
#
my @unmapped = sort @nmap;

# Write the unmapped language list
#
open(my $fh_unmap, ">", $out_langs) or
  die "Failed to open file: $out_langs\n";

for my $lname (@unmapped) {
  print { $fh_unmap } "$lname\n";
}

close($fh_unmap) or warn "Failed to close file at";

# Write the merged mapping
#
open(my $fh_map, ">", $out_map) or
  die "Failed to open file: $out_map\n";

for my $lkey (sort keys %lmap) {
  printf { $fh_map } "%s %s\n", $lkey, $lmap{$lkey};
}

close($fh_map) or warn "Failed to close file at";

# Write the filtered token data
#
filter_tokens($in_token, \%cmap, $out_token);

=head1 AUTHOR

Noah Johnson, C<noah.johnson@loupmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2023 Multimedia Data Technology Inc.

MIT License:

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files
(the "Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
